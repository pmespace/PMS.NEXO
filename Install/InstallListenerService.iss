; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!


#define MyAppName "PMS.Listener Service - v3.0"
#define MyAppKey "PMS.LISTENER"
#define MySettings "Settings"
#define MyLog "Log"
#define MyDoc "Doc"
#define MyReceipts "Receipts"
#define MySettingsFileName "pms.listener.settings.json"
#define MySimulator "Simulator"
#define MyProductVersion GetVersionNumbersString("..\bin\net6.0-windows\ListenerService.exe")
#define MyDriverVersion GetDateTimeString('yyyy-mm-dd', '', '');
#define MyExeDir "..\bin\net6.0-windows\win-x64"
#define MySimulatorDir "..\bin"
#define MyAppPublisher "PMS"
#define MyRegistry "Software\PMS\ListenerService\"
#define MySimulatorRegistry "Software\PMS\NEXO\Simulator"
#define MyRegistryKey "SettingsFileName"
#define MySimulatorRegistryKey "Settings"
#define MyUserdocs "..\..\.."
#define MyPDFToAdd "*.pdf"
#define ServiceName "ListenerService"
									
[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{F0BA5B7B-DAF1-451C-A3CD-F85028F9C0D6}
AppName={#MyAppName}
AppVersion={#MyProductVersion}
AppVerName={#MyAppName}
AppPublisher={#MyAppPublisher}
DefaultDirName={commonpf}\{#MyAppKey}
DefaultGroupName={#MyAppName}
DisableProgramGroupPage=yes
DisableDirPage=yes
OutputDir=.
OutputBaseFilename=Install{#MyAppKey}-v{#MyProductVersion}-v{#MyDriverVersion}

Compression=lzma
SolidCompression=yes

[Languages]
Name: "french"; MessagesFile: "compiler:Languages\French.isl"

[Dirs]
Name: "{app}"; Flags: uninsalwaysuninstall
Name: "{commonappdata}\{#MyAppKey}"; Flags: uninsneveruninstall
Name: "{commonappdata}\{#MyAppKey}\{#MySettings}"; Flags: uninsalwaysuninstall
Name: "{commonappdata}\{#MyAppKey}\{#MyLog}"; Flags: uninsalwaysuninstall
Name: "{commonappdata}\{#MyAppKey}\{#MyDoc}"; Flags: uninsalwaysuninstall
Name: "{commonappdata}\{#MyAppKey}\{#MySimulator}"; Flags: uninsalwaysuninstall
Name: "{commonappdata}\{#MyAppKey}\{#MyReceipts}"; Flags: uninsneveruninstall

[Files]
Source: "{#MyExeDir}\ListenerService.exe"; DestDir: "{app}"; Flags: ignoreversion
;Source: "{#MyExeDir}\*.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#MyExeDir}\fr\*.dll"; DestDir: "{app}\fr"; Flags: ignoreversion

;Source: "{commonappdata}\{#MyAppKey}\{#MySettings}\{#MySettingsFileName}"; DestDir: "{commonappdata}\{#MyAppKey}\{#MySettings}"; Flags: onlyifdoesntexist

Source: "{#MySimulatorDir}\nexoSimulator30.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#MySimulatorDir}\nexoBuilder30.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#MySimulatorDir}\*.dll"; DestDir: "{app}"; Flags: ignoreversion

Source: "{#MySimulatorDir}\nexo.simulator.json"; DestDir: "{commonappdata}\{#MyAppKey}\{#MySimulator}"; Flags: onlyifdoesntexist
Source: "{#MySimulatorDir}\nexo.simulator.response.*.json"; DestDir: "{commonappdata}\{#MyAppKey}\{#MySimulator}"; Flags: onlyifdoesntexist

[Run]
Filename: {sys}\sc.exe; Parameters: "create {#ServiceName} start= auto binPath= ""{app}\ListenerService.exe""" ; Flags: runhidden; StatusMsg: "Installation du service {#ServiceName}..."
Filename: {sys}\sc.exe; Parameters: "start {#ServiceName}" ; Flags: runhidden; StatusMsg: "Démarrage du service {#ServiceName}..."

[UninstallRun]
Filename: {sys}\net.exe; Parameters: "stop {#ServiceName}" ; Flags: runhidden
Filename: {sys}\sc.exe; Parameters: "delete {#ServiceName}" ; Flags: runhidden

[Registry]
Root: HKCU; Subkey: "{#MyRegistry}"; ValueName: "{#MyRegistryKey}"; ValueType: string; ValueData: "{commonappdata}\{#MyAppKey}\{#MySettings}\{#MySettingsFileName}"; Flags: createvalueifdoesntexist 
Root: HKCU; Subkey: "{#MySimulatorRegistry}"; ValueName: "{#MySimulatorRegistryKey}"; ValueType: string; ValueData: "{commonappdata}\{#MyAppKey}\{#MySimulator}\nexo.simulator.json"; Flags: createvalueifdoesntexist uninsdeletekey
											 
[Code]
var
  DirFound: string;
 
function FindInDir(const dir: string; const file: string): boolean;
var
  search: string;
  FindRec: TFindRec;
begin
  result := false;
  search := dir + '\*';
  if FindFirst(search, FindRec) then
  begin
    try
      repeat
        // on oublie "." et ".."
        if (FindRec.Name <> '.') and (FindRec.Name <> '..') then
        begin
          // si c'est un répertoire alors on l'ouvre et on cherche dedans
          if 0 <> (FindRec.Attributes and FILE_ATTRIBUTE_DIRECTORY) then
          begin
            result := FindInDir(dir + '\' + FindRec.Name, file);
          end
          // sinon on regarde si on trouve le fichier cherché
          else 
          begin
            Log(dir + '\' + FindRec.Name);
            if 0 = CompareText(FindRec.Name, file) then
            begin
              // le fichier a été trouvé on va s'arrêter
              result := true;
              DirFound := dir;
            end;
          end;
        end;
      until (result) or (not FindNext(FindRec));
    finally
      FindClose(FindRec);
    end;
  end;
end;
 
function IsCPOSDllManagerPresent(): boolean;
var
	fdir: string;
	fname: string;
begin
  DirFound := '';
	fdir := ExpandConstant('{commonpf}');
	fname := 'CPOS_DllManager'
  result := FindInDir(fdir, fname + '.exe');
  if not result then MsgBox(fname + ' hasn''t been not found in ' + fdir + ' and sub-directories. The driver could not be processed (registered/unregistered), please proceed manually.', mbError, MB_OK);
end;

function CPOSDllManagerDir(const Param: string): string;
begin
  result := DirFound;
end;

function HasCPOSDllManagerDirBeenFound(): boolean;
begin
  result := DirFound <> ''
end;