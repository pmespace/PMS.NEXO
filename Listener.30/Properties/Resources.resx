<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DisplayingQRCode" xml:space="preserve">
    <value>Displaying QRcode or BarCode</value>
  </data>
  <data name="DisplayingPredefinedContent" xml:space="preserve">
    <value>Displaying predefined content [{0}]</value>
  </data>
  <data name="DisplayingXHTMLContent" xml:space="preserve">
    <value>Displaying XHTML content</value>
  </data>
  <data name="InvalidDisplayDevice" xml:space="preserve">
    <value>Invalid display device request [{0}]</value>
  </data>
  <data name="DeviceDisplayAlwaysSucceed" xml:space="preserve">
    <value>No error DeviceDisplay</value>
  </data>
  <data name="NotificationAbortHasNotBeenProcessed" xml:space="preserve">
    <value>Abort request has not been processed</value>
  </data>
  <data name="NotificationForEvent" xml:space="preserve">
    <value>Notification for event {0} [{1}]</value>
  </data>
  <data name="NotificationMiscellaneousProcessing" xml:space="preserve">
    <value>Notification processed through miscellaneous processing</value>
  </data>
  <data name="POIIsAlreadyInUse" xml:space="preserve">
    <value>POI is already in use</value>
  </data>
  <data name="POIAccessHasBeenGranted" xml:space="preserve">
    <value>POI access has been granted</value>
  </data>
  <data name="LoginTryingToLogWith" xml:space="preserve">
    <value>Trying to log from SaleID {0} to POIID {1}</value>
  </data>
  <data name="LoginFailedToLogTo" xml:space="preserve">
    <value>Failed to log from SaleID {0} to POIID {1}</value>
  </data>
  <data name="ServiceStarting" xml:space="preserve">
    <value>Starting service {0}</value>
  </data>
  <data name="ServiceCompleted" xml:space="preserve">
    <value>Service {0} completed</value>
  </data>
  <data name="Logout" xml:space="preserve">
    <value>Logging out SaleID {0} from POIID {1}</value>
  </data>
  <data name="LoginSucceeded" xml:space="preserve">
    <value>Logged to POI</value>
  </data>
  <data name="ErrorMessageCantBeConvertedToRequest" xml:space="preserve">
    <value>message can't be converted to a request {0}</value>
  </data>
  <data name="ErrorRequestedPOIDoesntExist" xml:space="preserve">
    <value>requested POI {0} does not exist, the request will not be carried out</value>
  </data>
  <data name="ErrorInvalidRequestedService" xml:space="preserve">
    <value>The requested service is invalid [{0}]"</value>
  </data>
  <data name="ErrorRequestedServiceNotAllowed" xml:space="preserve">
    <value>The requested service is not allowed {0}</value>
  </data>
  <data name="ErrorInvalidRequestedIDs" xml:space="preserve">
    <value>The request parameters are not set properly, SaleID: {0}, POIID: {1}</value>
  </data>
  <data name="IsMissing" xml:space="preserve">
    <value>&lt;is missing&gt;</value>
  </data>
  <data name="ErrorFailedCreatingTheNexoObject" xml:space="preserve">
    <value>Failed creating the nexo object {0}, no more processing will occur</value>
  </data>
  <data name="ProcessingConnectedToPOI" xml:space="preserve">
    <value>Connected to POI</value>
  </data>
  <data name="ProcessingErrorWhileLogin" xml:space="preserve">
    <value>An error has occurred while trying to log to the POI</value>
  </data>
  <data name="ProcessingErrorWhileExchange" xml:space="preserve">
    <value>An error has occurred while trying to exchange the nexo retailer {0} order</value>
  </data>
  <data name="ProcessingErrorConnectingToPOI" xml:space="preserve">
    <value>Error connecting to the POI at {0}, no more processing can be made</value>
  </data>
  <data name="ProcessingException" xml:space="preserve">
    <value>An exception has occurred while processing the request [{0}]</value>
  </data>
  <data name="ProcessingTimeout" xml:space="preserve">
    <value>Timeout receiving the response to {0} request</value>
  </data>
  <data name="ProcessingCancelled" xml:space="preserve">
    <value>Operation manually cancelled while processing {0} service</value>
  </data>
  <data name="ProcessingResult" xml:space="preserve">
    <value>Processing of service {0} ended up with {1} result {2}</value>
  </data>
  <data name="ProcessingUnknowError" xml:space="preserve">
    <value>Unknown error while processing service {0} ({1})</value>
  </data>
  <data name="ProcessingNoMoreAction" xml:space="preserve">
    <value>Service {0} ended with a noMoreAction status</value>
  </data>
  <data name="ProcessingReceived" xml:space="preserve">
    <value>Received an reply for service {0}</value>
  </data>
  <data name="WSInterfaceFailedToConnectToListener" xml:space="preserve">
    <value>Failed connecting to the processing server</value>
  </data>
  <data name="WSInterfaceFailedSendingDataToListener" xml:space="preserve">
    <value>Failed sending data to the listener</value>
  </data>
  <data name="ConnectionHasBeenCancelled" xml:space="preserve">
    <value>Connection has been cancelled</value>
  </data>
  <data name="WSInterfaceIncomingConnection" xml:space="preserve">
    <value>Incoming connection</value>
  </data>
  <data name="WSInterfaceWaitingSecurityDetails" xml:space="preserve">
    <value>Waiting security details</value>
  </data>
  <data name="WSInterfaceReceivedSecurityDetails" xml:space="preserve">
    <value>Received security details: {0}</value>
  </data>
  <data name="WSInterfaceLoginOK" xml:space="preserve">
    <value>Login to WS interface granted</value>
  </data>
  <data name="SendingLoginResult" xml:space="preserve">
    <value>Sending login result: {0}</value>
  </data>
  <data name="WSInterfaceConnectedToListener" xml:space="preserve">
    <value>Connected to listener at {0}</value>
  </data>
  <data name="ReceivedMessage" xml:space="preserve">
    <value>received message</value>
  </data>
  <data name="ThreadNameWS" xml:space="preserve">
    <value>WS Process</value>
  </data>
  <data name="ThreadNameHTTP" xml:space="preserve">
    <value>HTTP Process</value>
  </data>
  <data name="WSInterfaceNotWSRequest" xml:space="preserve">
    <value>Received HTTP request, connection is being closed with status {0}</value>
  </data>
  <data name="WSInterfaceStopped" xml:space="preserve">
    <value>The listener WS interface stopped with result code {0}</value>
  </data>
  <data name="POISConnectionSettings" xml:space="preserve">
    <value>Connection settings</value>
  </data>
  <data name="None" xml:space="preserve">
    <value>&lt;none&gt;</value>
  </data>
  <data name="DisplayLogFile" xml:space="preserve">
    <value>Log file: {0}</value>
  </data>
  <data name="DisplayStarting" xml:space="preserve">
    <value>Trying to read settings from {0}</value>
  </data>
  <data name="DisplayFailedToReadSettings" xml:space="preserve">
    <value>Failed to read settings</value>
  </data>
  <data name="DisplayAddress" xml:space="preserve">
    <value>IP address {0}: {1} ({2})</value>
  </data>
  <data name="DisplayFailedToConnectToEListener" xml:space="preserve">
    <value>Listener connection to EListener server process failed to start, shutting down</value>
  </data>
  <data name="DisplayFailedToStartWSInterface" xml:space="preserve">
    <value>listener WS interface failed to start, shutting down</value>
  </data>
  <data name="WSInterfaceWaitingForIncomingData" xml:space="preserve">
    <value>Waiting incoming data</value>
  </data>
  <data name="WSInterfaceConnectionHasBeenClosed" xml:space="preserve">
    <value>Connection from {0} has been closed</value>
  </data>
  <data name="UnknownError" xml:space="preserve">
    <value>Unknown error</value>
  </data>
  <data name="ERROR_FailedToAddWSClient" xml:space="preserve">
    <value>Failed to insert {0} in the list of current clients</value>
  </data>
  <data name="INFOR_StartingWSInterface" xml:space="preserve">
    <value>Starting listener WS interface</value>
  </data>
  <data name="TRACE_WSInterfaceStarted" xml:space="preserve">
    <value>Listener WS interface started</value>
  </data>
  <data name="ERROR_WSInterfaceNotStarted" xml:space="preserve">
    <value>Listener WS interface failed to start</value>
  </data>
  <data name="ERROR_WSClientHasStopped" xml:space="preserve">
    <value>The listener process connected to WS server has terminated, shutting down</value>
  </data>
  <data name="WSClientConnectingToServer" xml:space="preserve">
    <value>Client listener trying to connect to {0} (attempt {1})"</value>
  </data>
  <data name="WSClientIsConnected" xml:space="preserve">
    <value>Client listener is connected to {0}</value>
  </data>
  <data name="WSClientFailedToConnect" xml:space="preserve">
    <value>Client listener failed to connect to the WS server at {0}, another attempt will be made in {1} seconds</value>
  </data>
  <data name="WSClientTerminated" xml:space="preserve">
    <value>Client listener has been terminated, shutting down</value>
  </data>
  <data name="WSInterfaceLoginKO" xml:space="preserve">
    <value>Login to WS interface denied</value>
  </data>
  <data name="WSInterfaceDisconnected" xml:space="preserve">
    <value>WS interface disconnected</value>
  </data>
  <data name="FailedInsertingConnectedClient" xml:space="preserve">
    <value>Failed saving incoming connection to list of current clients</value>
  </data>
  <data name="InputDataFailedToSetData" xml:space="preserve">
    <value>Failed settings data {0} to value {1}</value>
  </data>
  <data name="InputDataFailedCreatingPath" xml:space="preserve">
    <value>Failed creating the data path {0}, that data won't be set</value>
  </data>
  <data name="ProcessingPerformingAutoLogin" xml:space="preserve">
    <value>Performing auto-login</value>
  </data>
  <data name="ProcessingPerformingAutoLogout" xml:space="preserve">
    <value>Performing auto-logout</value>
  </data>
  <data name="OutputDataFailedFetchingData" xml:space="preserve">
    <value>Failed fetching output data {0}</value>
  </data>
  <data name="OutputDataFailedCreatingPath" xml:space="preserve">
    <value>Failed creating return data path for {0}, that data won't be fetched</value>
  </data>
  <data name="ProcessingSendingAnswerToServer" xml:space="preserve">
    <value>Sending message to eListener [{0}]</value>
  </data>
  <data name="ProcessingFoundCardBrand" xml:space="preserve">
    <value>Found card brand: {0}</value>
  </data>
  <data name="NeptingTimeoutReceiving" xml:space="preserve">
    <value>Timeout receiving a message</value>
  </data>
  <data name="NeptingIsNotReady" xml:space="preserve">
    <value>The Nepting link is not ready, function {0} can't be executed</value>
  </data>
  <data name="NeptingInvalidPath" xml:space="preserve">
    <value>Invalid path or not writeable ({0})</value>
  </data>
  <data name="NeptingError" xml:space="preserve">
    <value>Error while running {0}</value>
  </data>
  <data name="NeptingIsReady" xml:space="preserve">
    <value>The Nepting link is already setup, function {0} can't be executed</value>
  </data>
  <data name="NeptingInvalidLogLevel" xml:space="preserve">
    <value>The specified log level is invalid ({0})</value>
  </data>
  <data name="NeptingInvalidLogFileSize" xml:space="preserve">
    <value>Invalid log file size({0})</value>
  </data>
  <data name="NeptingInvalidConnectionType" xml:space="preserve">
    <value>Invalid connection type specified ({0})</value>
  </data>
  <data name="NeptingNoMessage" xml:space="preserve">
    <value>No message has been created</value>
  </data>
  <data name="NeptingNoFieldName" xml:space="preserve">
    <value>No field name was specified to add to the message</value>
  </data>
  <data name="NeptingNoFieldValue" xml:space="preserve">
    <value>No field value was specified to add to the message for field {0}</value>
  </data>
  <data name="NeptingIsNotConnected" xml:space="preserve">
    <value>No active connection to a Nepting terminal</value>
  </data>
  <data name="NeptingFieldNotPresent" xml:space="preserve">
    <value>The requested field {0} was not found in the message</value>
  </data>
  <data name="NeptingFieldIndexNotPresent" xml:space="preserve">
    <value>The requested field {0} with index {1} was not found in the message</value>
  </data>
  <data name="NeptingFailedCreatingMessage" xml:space="preserve">
    <value>Failed creating a Nepting message</value>
  </data>
  <data name="OnStartNoServiceActivated" xml:space="preserve">
    <value>[OnStart] listener can't start, no service is supported</value>
  </data>
  <data name="OnStartListenerStarted" xml:space="preserve">
    <value>[OnStart] listener has started</value>
  </data>
  <data name="OnStopStoppingListener" xml:space="preserve">
    <value>[OnStop] stopping listener</value>
  </data>
  <data name="OnConnectAcceptingConnection" xml:space="preserve">
    <value>[OnConnect] accepting connection from {0} {1}</value>
  </data>
  <data name="OnConnectNotVerifyingIP" xml:space="preserve">
    <value>[OnConnect] not verifying incoming IP</value>
  </data>
  <data name="OnConnectConnectionDeclined" xml:space="preserve">
    <value>[OnConnect] connection from {0} declined</value>
  </data>
  <data name="OnConnectException" xml:space="preserve">
    <value>[OnConnect] exception while connecting client {0}, connection declined</value>
  </data>
  <data name="OnDisconnectClientDisconnected" xml:space="preserve">
    <value>[OnDisconnect] {0} has been disconnected</value>
  </data>
  <data name="OnMessageReceivedRequest" xml:space="preserve">
    <value>received request of {0} bytes [{1}]</value>
  </data>
  <data name="OnMessageDynamicPOI" xml:space="preserve">
    <value>[OnMessage] dynamic POI {0}</value>
  </data>
  <data name="UsingPOI" xml:space="preserve">
    <value>using {0}</value>
  </data>
  <data name="ReplyToClientMessage" xml:space="preserve">
    <value>reply to client [{0} bytes] {1}</value>
  </data>
  <data name="FailedToConnectToWSServer" xml:space="preserve">
    <value>failed to connect to WS server [{0}]</value>
  </data>
  <data name="FailedToConnectToListenerAsClient" xml:space="preserve">
    <value>failed to connect to listener as client, disconnecting from WS server</value>
  </data>
  <data name="SendingLoginRequest" xml:space="preserve">
    <value>sending login request to WS server [{0}]</value>
  </data>
  <data name="ReadyToReceiveIncomingRequests" xml:space="preserve">
    <value>ready to receive incoming requests from WS server</value>
  </data>
  <data name="FailedCreatingSecurityChain" xml:space="preserve">
    <value>failed to create security chain, disconnecting from WS server</value>
  </data>
  <data name="ConnectionHasBeenGranted" xml:space="preserve">
    <value>connection has been granted [{0}]</value>
  </data>
  <data name="ConnectionDenied" xml:space="preserve">
    <value>connection denied, disconnecting from WS server</value>
  </data>
  <data name="InvalidLoginResponse" xml:space="preserve">
    <value>invalid login response message received [{0}], disconnecting from server")</value>
  </data>
  <data name="ReceivedRequestFromWSServer" xml:space="preserve">
    <value>received request from WS server [{0}]</value>
  </data>
  <data name="RequestSentToTheListener" xml:space="preserve">
    <value>request sent to the listener</value>
  </data>
  <data name="FailedSendingRequestToListener" xml:space="preserve">
    <value>failed sending request to the listener</value>
  </data>
  <data name="InvalidRequestFromWSServer" xml:space="preserve">
    <value>received invalid request received from the server [{order}], still listening</value>
  </data>
  <data name="ServiceTimeout" xml:space="preserve">
    <value>Service {0} timed out</value>
  </data>
</root>