<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DisplayingQRCode" xml:space="preserve">
    <value>Displaying QRcode or BarCode</value>
  </data>
  <data name="DisplayingPredefinedContent" xml:space="preserve">
    <value>Displaying predefined content [{0}]</value>
  </data>
  <data name="DisplayingXHTMLContent" xml:space="preserve">
    <value>Displaying XHTML content</value>
  </data>
  <data name="InvalidDisplayDevice" xml:space="preserve">
    <value>Invalid display device request [{0}]</value>
  </data>
  <data name="DeviceDisplayAlwaysSucceed" xml:space="preserve">
    <value>No error DeviceDisplay</value>
  </data>
  <data name="NotificationAbortHasNotBeenProcessed" xml:space="preserve">
    <value>Abort request has not been processed</value>
  </data>
  <data name="NotificationForEvent" xml:space="preserve">
    <value>Notification for event {0} [{1}]</value>
  </data>
  <data name="NotificationMiscellaneousProcessing" xml:space="preserve">
    <value>Notification processed through miscellaneous processing</value>
  </data>
  <data name="POIIsAlreadyInUse" xml:space="preserve">
    <value>POI is already in use</value>
  </data>
  <data name="POIAccessHasBeenGranted" xml:space="preserve">
    <value>POI access has been granted</value>
  </data>
  <data name="LoginTryingToLogWith" xml:space="preserve">
    <value>Trying to log from SaleID {0} to POIID {1}</value>
  </data>
  <data name="LoginFailedToLogTo" xml:space="preserve">
    <value>Failed to log from SaleID {0} to POIID {1}</value>
  </data>
  <data name="ServiceStarting" xml:space="preserve">
    <value>Starting service {0}</value>
  </data>
  <data name="ServiceCompleted" xml:space="preserve">
    <value>Service {0} completed</value>
  </data>
  <data name="Logout" xml:space="preserve">
    <value>Logging out SaleID {0} from POIID {1}</value>
  </data>
  <data name="LoginSucceeded" xml:space="preserve">
    <value>Logged to POI</value>
  </data>
  <data name="ErrorMessageCantBeConvertedToRequest" xml:space="preserve">
    <value>Message can't be converted to a request [{0}]</value>
  </data>
  <data name="ErrorRequestedPOIDoesntExist" xml:space="preserve">
    <value>Requested POI [{0}] doesn't exist, The request will not be carried out"</value>
  </data>
  <data name="ErrorInvalidRequestedService" xml:space="preserve">
    <value>The requested service is invalid [{0}]"</value>
  </data>
  <data name="ErrorRequestedServiceNotAllowed" xml:space="preserve">
    <value>The requested service is not allowed [{0}]</value>
  </data>
  <data name="ErrorInvalidRequestedIDs" xml:space="preserve">
    <value>The request parameters are not set properly, SaleID: {0}, POIID: {1}</value>
  </data>
  <data name="IsMissing" xml:space="preserve">
    <value>&lt;is missing&gt;</value>
  </data>
  <data name="ErrorFailedCreatingTheNexoObject" xml:space="preserve">
    <value>Failed creating the nexo object {0}, no more processing will occur</value>
  </data>
  <data name="ProcessingConnectedToPOI" xml:space="preserve">
    <value>Connected to POI</value>
  </data>
  <data name="ProcessingErrorWhileLogin" xml:space="preserve">
    <value>An error has occurred while trying to log to the POI</value>
  </data>
  <data name="ProcessingErrorWhileExchange" xml:space="preserve">
    <value>An error has occurred while trying to exchange the nexo retailer {0} order</value>
  </data>
  <data name="ProcessingErrorConnectingToPOI" xml:space="preserve">
    <value>Error connecting to the POI at {0}, no more processing can be made</value>
  </data>
  <data name="ProcessingException" xml:space="preserve">
    <value>An exception has occurred while processing the request [{0}]</value>
  </data>
  <data name="ProcessingTimeout" xml:space="preserve">
    <value>Timeout receiving the response to {0} request</value>
  </data>
  <data name="ProcessingCancelled" xml:space="preserve">
    <value>Operation manually cancelled while processing {0} service</value>
  </data>
  <data name="ProcessingResult" xml:space="preserve">
    <value>Processing of service {0} ended up with {1} result {2}</value>
  </data>
  <data name="ProcessingUnknowError" xml:space="preserve">
    <value>Unknown error while processing {0} service</value>
  </data>
</root>