using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;
using COMMON;

namespace NEXO
{
	[ComVisible(false)]
	class NexoErrors
	{
		public static string Aborted(ResponseType r, string status, string abortreason, string saleid, string serviceid) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.ErrorCondition = ErrorConditionEnumeration.Aborted.ToString(); r.AdditionalResponse = "Service aborted during " + status + " - Reason+: " + abortreason + " - From: " + saleid + " - Message ID: " + serviceid; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }

		public static string Busy(ResponseType r, string msg) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.Busy.ToString(); r.AdditionalResponse = "System busy: " + msg; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string BusyComponentUnavailable(ResponseType r, string component, string reason) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.Busy.ToString(); r.AdditionalResponse = "POI " + component + " temporary unavailable: " + reason; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string BusyPOIBusy(ResponseType r, string request) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.Busy.ToString(); r.AdditionalResponse = "POI terminal busy processing another request: " + request; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string BusyDeviceBusy(ResponseType r, string system, string device) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.Busy.ToString(); r.AdditionalResponse = system + " terminal " + device + " busy processing the device request"; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }

		public static string CancelUserCancellation(ResponseType r, string status) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.Cancel.ToString(); r.AdditionalResponse = "User cancellation during " + status; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string CancelSystemCancellation(ResponseType r, string reason) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.Cancel.ToString(); r.AdditionalResponse = "System cancellation during " + reason; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }

		public static string DeviceOutPOITemporaryUnavailable(ResponseType r, string reason) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.DeviceOut.ToString(); r.AdditionalResponse = "POI is temporary unavailable: " + reason; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string DeviceOutPOIPermanentlyUnavailable(ResponseType r, string device, string reason) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.DeviceOut.ToString(); r.AdditionalResponse = "POI " + device + " is permanently unavailable: " + reason; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string DeviceOutDeviceTemporaryOut(ResponseType r, string device, string reason) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.DeviceOut.ToString(); r.AdditionalResponse = device + " is temporarily out of service: " + reason; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string DeviceOutDevicePermanentlyOut(ResponseType r, string device, string reason) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.DeviceOut.ToString(); r.AdditionalResponse = device + " is permanently out of service: " + reason; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string DeviceOutMaintenance(ResponseType r, string device, string reason) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.DeviceOut.ToString(); r.AdditionalResponse = device + " Maintenance: " + reason; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string DeviceOutSecurityAlarm(ResponseType r, string alarm) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.DeviceOut.ToString(); r.AdditionalResponse = "Security alarm: " + alarm; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }

		public static string InProgress(ResponseType r) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.InProgress.ToString(); r.AdditionalResponse = "Uncompleted Transaction"; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }

		public static string InsertedCard(ResponseType r) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.InsertedCard.ToString(); r.AdditionalResponse = "Not user input"; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string InsertedCardNoCardEntered(ResponseType r, string seconds) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.InsertedCard.ToString(); r.AdditionalResponse = "No Card entered after " + seconds + " seconds"; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string InsertedCardUnreadableCard(ResponseType r, string reason) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.InsertedCard.ToString(); r.AdditionalResponse = "Card can't be read: " + reason; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string InsertedCardUnknownCard(ResponseType r, string binaid) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.InsertedCard.ToString(); r.AdditionalResponse = "Unknown card : " + binaid; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string InsertedCardInvalidCard(ResponseType r, string reason) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.InsertedCard.ToString(); r.AdditionalResponse = "Card invalid: " + reason; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }

		public static string LoggedOut(ResponseType r, string saleid, string evt, DateTime time) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.LoggedOut.ToString(); r.AdditionalResponse = saleid + " never logged since last " + evt + " at " + time.ToString(Chars.DATETIME); CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }

		public static string MessageFormatGeneralParsingError(ResponseType r, string absolutedataname, string error) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.MessageFormat.ToString(); r.AdditionalResponse = "General parsing error: " + absolutedataname + " (" + error + ")"; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string MessageFormatMandatoryDataAbsent(ResponseType r, string absolutedataname) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.MessageFormat.ToString(); r.AdditionalResponse = "Mandatory data element or structure missing: " + absolutedataname; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string MessageFormatUnexpectedData(ResponseType r, string absolutedataname, string error) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.MessageFormat.ToString(); r.AdditionalResponse = "Unexpected data element or structure: " + absolutedataname + " (" + error + ")"; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string MessageFormatInvalidNumberOfRepetitions(ResponseType r, string absolutedataname, string error) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.MessageFormat.ToString(); r.AdditionalResponse = "Too many repetitions of the component: " + absolutedataname + " (" + error + ")"; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string MessageFormatInvalidOrderOfRepetitions(ResponseType r, string absolutedataname, string error) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.MessageFormat.ToString(); r.AdditionalResponse = "Invalid repetitions order of the component: " + absolutedataname + " (" + error + ")"; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string MessageFormatUnexpectedValue(ResponseType r, string absolutedataname, string value) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.MessageFormat.ToString(); r.AdditionalResponse = "Unexpected data element value: " + absolutedataname + " (" + value + ")"; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string MessageFormatInvalidValueForTheType(ResponseType r, string absolutedataname, string value, string type) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.MessageFormat.ToString(); r.AdditionalResponse = absolutedataname + " Invalid value (" + value + ") for type " + type; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string MessageFormatInvalidEnumeratedValue(ResponseType r, string absolutedataname, string value, string type) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.MessageFormat.ToString(); r.AdditionalResponse = absolutedataname + " Value " + value + " is not part of the enumerated or cluster " + type; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		//public static string MessageFormatRepeatedMessage(ResponseType r, string serviceidordeviceidisrepeated, string repeatedid) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.MessageFormat.ToString(); r.AdditionalResponse = "Repeated message: " + serviceidordeviceidisrepeated + " (" + repeatedid + ")"; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string MessageFormatRepeatedMessage(ResponseType r, string repeatedid) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.MessageFormat.ToString(); r.AdditionalResponse = "Repeated message: " + repeatedid; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string MessageFormatDataSize(ResponseType r, string absolutedataname, string size) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.MessageFormat.ToString(); r.AdditionalResponse = "Invalid data size: " + absolutedataname + " (" + size + ")"; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string MessageFormatEmptyCluster(ResponseType r, string absolutedataname) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.MessageFormat.ToString(); r.AdditionalResponse = "Empty cluster: " + absolutedataname; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string MessageFormatUnacceptableValueCombination(ResponseType r, string absolutedataname, string value) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.MessageFormat.ToString(); r.AdditionalResponse = "Unacceptable value combination: " + absolutedataname + " & " + value; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string MessageFormatUnknownData(ResponseType r, string absolutedataname) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.MessageFormat.ToString(); r.AdditionalResponse = "Unknown data element or structure: " + absolutedataname; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }

		public static string NotAllowedForbiddenDialogue(ResponseType r, string service) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.NotAllowed.ToString(); r.AdditionalResponse = "Forbidden request, service (" + service + ") dialogue in progress"; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string NotAllowedForbiddenCombinationOfService(ResponseType r, string services) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.NotAllowed.ToString(); r.AdditionalResponse = "Forbidden combination of services: " + services; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string NotAllowedForbiddenMessage(ResponseType r, string message) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.NotAllowed.ToString(); r.AdditionalResponse = "Forbidden message:" + message; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string NotAllowedNotAllowedValue(ResponseType r, string componentname, string value, string reason) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.NotAllowed.ToString(); r.AdditionalResponse = componentname + " not allowed value: " + value + " (" + reason + ")"; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string NotAllowedCompletedTransaction(ResponseType r) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.NotAllowed.ToString(); r.AdditionalResponse = "Completed transaction"; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string NotAllowedInvalidPaymentReservation(ResponseType r, string reason) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.NotAllowed.ToString(); r.AdditionalResponse = "Invalid payment reservation: " + reason; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string NotAllowedForbiddenCardReaderSequence(ResponseType r, string messagename, string state) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.NotAllowed.ToString(); r.AdditionalResponse = messagename + " not allowed in this state: " + state; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string NotAllowedForbiddenCardReaderAPDURequest(ResponseType r, string apdu, string cardbrand) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.NotAllowed.ToString(); r.AdditionalResponse = apdu + " APDU request not allowed for the card: " + cardbrand; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }

		public static string NotFoundTransactionNotFound(ResponseType r, string txnid, string component) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.NotFound.ToString(); r.AdditionalResponse = "Transaction " + txnid + " not Found in " + component + " link"; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string NotFoundMessageNotFound(ResponseType r, string messagecategory, string id) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.NotFound.ToString(); r.AdditionalResponse = "Message not found, last " + messagecategory + " has ID " + id; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string NotFoundReconciliationNotFound(ResponseType r, string reconciliationid, string reason) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.NotFound.ToString(); r.AdditionalResponse = "Reconciliation " + reconciliationid + " not found: " + reason; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string NotFoundKeyReferenceNotFound(ResponseType r, string keyref) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.NotFound.ToString(); r.AdditionalResponse = "Key reference " + keyref + " not found"; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string NotFoundPredefinedMessageReferenceNotFound(ResponseType r, string messageid) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.NotFound.ToString(); r.AdditionalResponse = "Message reference " + messageid + " not found"; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string NotFoundLanguageNotSupported(ResponseType r, string language) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.NotFound.ToString(); r.AdditionalResponse = "Language " + language + " not supported"; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string NotFoundCardRemoved(ResponseType r, string lastmessage) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.NotFound.ToString(); r.AdditionalResponse = "Card removed by the customer: " + lastmessage; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }

		public static string PaymentRestriction(ResponseType r, string number, string brand) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.PaymentRestriction.ToString(); r.AdditionalResponse = number + " products not payable by " + brand + " card"; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }

		public static string RefusalAcquirerDecline(ResponseType r, string transaction, string acquirer, string reason, string code) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.Refusal.ToString(); r.AdditionalResponse = transaction + " refused by acquirer: " + acquirer + " - Reason: " + reason + " - Code: " + code; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string RefusalLocalDecline(ResponseType r, string transaction, string acquirer, string reason, string code) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.Refusal.ToString(); r.AdditionalResponse = transaction + " refused locally : " + acquirer + " - Reason: " + reason + " - Code: " + code; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }

		public static string UnavailableDevice(ResponseType r, string devicetype, string infoqualify) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.UnavailableDevice.ToString(); r.AdditionalResponse = devicetype + " (" + infoqualify + ") Device unavailable absent or not configured"; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string UnavailableDeviceUnavailableDisplayFormat(ResponseType r, string format, string feature) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.UnavailableDevice.ToString(); r.AdditionalResponse = "Unavailable display format: " + format + " for feature: " + feature; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string UnavailableDeviceUnavailableInputCommand(ResponseType r, string command) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.UnavailableDevice.ToString(); r.AdditionalResponse = "Unavaible input command: " + command; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string UnavailableDeviceUnavailablePrintingMode(ResponseType r, string parameter, string value) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.UnavailableDevice.ToString(); r.AdditionalResponse = "Unavaible printing mode: " + parameter + " (" + value + ")"; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string UnavailableDeviceUnavailablePINVerificationMethod(ResponseType r, string method) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.UnavailableDevice.ToString(); r.AdditionalResponse = "Unavaible PIN verification method: " + method; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string UnavailableDeviceUnavailableSoundFormat(ResponseType r, string format) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.UnavailableDevice.ToString(); r.AdditionalResponse = "Unavailable sound format: " + format; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }

		public static string UnavailableServiceTooOldProtocolVersion(ResponseType r, string saleversion, string serverversion) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.UnavailableService.ToString(); r.AdditionalResponse = "Sale protocol version " + saleversion + " too old for server implemented version: " + serverversion; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string UnavailableServiceUnavailableServiceForTheCard(ResponseType r, string service, string cardbrand) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.UnavailableService.ToString(); r.AdditionalResponse = "Service " + service + " unavailable for card: " + cardbrand; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string UnavailableServiceUnavailableAdministrativeService(ResponseType r) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.UnavailableService.ToString(); r.AdditionalResponse = "Unavailable administrative service"; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }

		public static string UnreachableHostHostUnreachable(ResponseType r, string reason) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.UnreachableHost.ToString(); r.AdditionalResponse = "Host unreachable: " + reason; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
		public static string UnreachableHostNoHostAnswer(ResponseType r, string reason) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.UnreachableHost.ToString(); r.AdditionalResponse = "No answer from host: " + reason; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }

		public static string WrongPIN(ResponseType r, string nbretries, string remainingretries) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = ResultEnumeration.Failure.ToString(); r.ErrorCondition = ErrorConditionEnumeration.WrongPIN.ToString(); r.AdditionalResponse = "Wrong PIN: " + nbretries + " retries – Remaining retries: " + remainingretries; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }

		public static string GenericEror(ResponseType r, ResultEnumeration result, ErrorConditionEnumeration errorCondition, string addtionalInformation) { if (ResultEnumeration.Success.ToString().ToLower() != r.Result.ToLower()) return r.AdditionalResponse; r.Result = result.ToString(); r.ErrorCondition = errorCondition.ToString(); r.AdditionalResponse = addtionalInformation; CLog.Add(r.AdditionalResponse, TLog.ERROR); return r.AdditionalResponse; }
	}
}
